/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.acortador.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.acortador.model.InlineResponse2011;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.constraints.Size;
import java.io.IOException;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-06T17:21:42.001Z")

@Api(value = "masive", description = "the masive API")
@RequestMapping(value = "/v2")
public interface MasiveApi {

    Logger log = LoggerFactory.getLogger(MasiveApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "retorna configuracion del proxy", nickname = "getMasssive", notes = "este servicio devuelve el archivo para configurar el proxy", tags={ "masive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok"),
        @ApiResponse(code = 400, message = "parametros incorrectos") })
    @RequestMapping(value = "/masive/{ticket}",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getMasssive(@Size(max=128) @ApiParam(value = "develve texto plano ",required=true) @PathVariable("ticket") String ticket) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MasiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "retorna configuracion del proxy", nickname = "headMasssive", notes = "este servicio devuelve el archivo para configurar el proxy", tags={ "masive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 102, message = "en proceso"),
        @ApiResponse(code = 200, message = "ok"),
        @ApiResponse(code = 400, message = "parametros incorrectos") })
    @RequestMapping(value = "/masive/{ticket}",
        produces = { "text/plain" }, 
        method = RequestMethod.HEAD)
    default ResponseEntity<Void> headMasssive(@Size(max=128) @ApiParam(value = "develve texto plano ",required=true) @PathVariable("ticket") String ticket) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MasiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "retorna ticket", nickname = "postMassive", notes = "este servicio devuelve un ticket para el proceso batch de urls", response = InlineResponse2011.class, tags={ "masive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "ok", response = InlineResponse2011.class),
        @ApiResponse(code = 400, message = "parametros incorrectos") })
    @RequestMapping(value = "/masive",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2011> postMassive() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ticket\" : \"20324525645\"}", InlineResponse2011.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default MasiveApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
